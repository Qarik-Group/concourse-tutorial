---
meta:
  name: (( param "Please name your pipeline" ))
  team: (( param "Please provide expected concourse team to deploy test pipelines" ))
  pipeline: (( grab meta.name ))
  target: (( param "Please identify the name of the target Concourse CI" ))
  url: (( param "Please specify the full url of the target Concourse CI" ))

  image:
    name: starkandwayne/concourse
    tag: latest

  github:
    uri: (( concat "git@github.com:" meta.github.owner "/" meta.github.repo ))
    owner: (( param "Please specify the name of the user / organization that owns the Github repository" ))
    repo: (( param "Please specify the name of the Github repository" ))
    branch_master: master
    branch_develop: develop
    private_key: (( param "Please generate an SSH Deployment Key for this repo and specify it here" ))
    access_token: (( param "Please generate a Personal Access Token to be used for creating github releases (do you have a ci-bot?)" ))

  cf:
    api: https://api.run.pivotal.io
    skip_cert_check: false
    username: (( param "please provide cf.username" ))
    password: (( param "please provide cf.password" ))
    organization: (( param "please provide cf.organization" ))
    space: (( param "please provide cf.space-production" ))

    master:
      appname: (( grab meta.name ))
    develop:
      appname: (( concat meta.name "-develop" ))

  concourse:
    url: (( param "please provide concourse.url" ))
    username: (( param "please provide concourse.username" ))
    password: (( param "please provide concourse.password" ))
    ca_cert: (( param "please provide concourse.ca_cert" ))

  # credhub:
  #   url: (( param "please provide credhub.url" ))
  #   username: (( param "please provide credhub.username" ))
  #   password: (( param "please provide credhub.password" ))
  #   ca_cert: (( param "please provide credhub.ca_cert" ))

  vault:
    target: (( param "please provide vault.target" ))
    roleid: (( param "please provide vault.roleid" ))
    secretid: (( param "please provide vault.secretid" ))

groups:
  - name: (( grab meta.pipeline ))
    jobs:
      # - testflight-develop
      - testflight-master
      - website-master
      # - website-develop

jobs:
  # - name: testflight-develop
  #   public: false
  #   serial_groups: [tutorial-pipeline]
  #   plan:
  #     - get: git
  #       resource: git-develop
  #       trigger: true
  #     - task: testflight
  #       config:
  #         platform: linux
  #         image_resource:
  #           type: docker-image
  #           source:
  #             repository: (( grab meta.image.name ))
  #             tag: (( grab meta.image.tag ))
  #         inputs:
  #           - {name: git}
  #         run:
  #           path: ./git/ci/scripts/testflight-with-credhub.sh
  #           args: []
  #         params:
  #           REPO_ROOT: git
  #           FLY_URL: (( grab meta.concourse.url ))
  #           FLY_TEAM: (( grab meta.team ))
  #           FLY_USERNAME: (( grab meta.concourse.username ))
  #           FLY_PASSWORD: (( grab meta.concourse.password ))
  #           FLY_CACERT: (( grab meta.concourse.ca_cert ))
  #           # CREDHUB_URL: (( grab meta.credhub.url ))
  #           # CREDHUB_USERNAME: (( grab meta.credhub.username ))
  #           # CREDHUB_PASSWORD: (( grab meta.credhub.password ))
  #           # CREDHUB_CACERT: (( grab meta.credhub.ca_cert ))
  #           VAULT_TARGET: ((grab meta.vault.target))
  #           VAULT_ROLEID: ((grab meta.vault.roleid))
  #           VAULT_SECRETID: ((grab meta.vault.secretid))
  #           team: (( grab meta.team ))
  #           credmanager: vault
  - name: testflight-master
    public: false
    serial_groups: [tutorial-pipeline]
    plan:
      - get: git
        resource: git-master
        trigger: true
      - task: testflight
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: (( grab meta.image.name ))
              tag: (( grab meta.image.tag ))
          inputs:
            - {name: git}
          run:
            path: ./git/ci/scripts/testflight-with-credhub.sh
            args: []
          params:
            REPO_ROOT: git
            FLY_URL: (( grab meta.concourse.url ))
            FLY_TEAM: (( grab meta.team ))
            FLY_USERNAME: (( grab meta.concourse.username ))
            FLY_PASSWORD: (( grab meta.concourse.password ))
            FLY_CACERT: (( grab meta.concourse.ca_cert ))
            # CREDHUB_URL: (( grab meta.credhub.url ))
            # CREDHUB_USERNAME: (( grab meta.credhub.username ))
            # CREDHUB_PASSWORD: (( grab meta.credhub.password ))
            # CREDHUB_CACERT: (( grab meta.credhub.ca_cert ))
            VAULT_TARGET: ((grab meta.vault.target))
            VAULT_ROLEID: ((grab meta.vault.roleid))
            VAULT_SECRETID: ((grab meta.vault.secretid))
            team: (( grab meta.team ))
            credmanager: vault
  - name: website-master
    public: false
    serial: true
    plan:
      - get: git
        resource: git-master
        trigger: true
      - task: mkdocs-build
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: (( grab meta.image.name ))
              tag: (( grab meta.image.tag ))
          inputs:
            - {name: git}
          outputs:
            - {name: site}
          run:
            path: ./git/ci/scripts/mkdocs-build.sh
            args: []
          params:
            REPO_ROOT: git
            SITE_ROOT: site
      - put: deploy-master
        params:
          manifest: site/manifest-production.yml
          path: site
          current_app_name: (( grab meta.cf.master.appname ))

  # - name: website-develop
  #   public: false
  #   serial: true
  #   plan:
  #     - get: git
  #       resource: git-develop
  #       trigger: true
  #     - task: mkdocs-build
  #       config:
  #         platform: linux
  #         image_resource:
  #           type: docker-image
  #           source:
  #             repository: (( grab meta.image.name ))
  #             tag: (( grab meta.image.tag ))
  #         inputs:
  #           - {name: git}
  #         outputs:
  #           - {name: site}
  #         run:
  #           path: ./git/ci/scripts/mkdocs-build.sh
  #           args: []
  #         params:
  #           REPO_ROOT: git
  #           SITE_ROOT: site
  #     - put: deploy-develop
  #       params:
  #         manifest: site/manifest-develop.yml
  #         path: site
  #         current_app_name: (( grab meta.cf.develop.appname ))

resources:
  # - name: git-develop
  #   type: git
  #   check_every: 1h
  #   source:
  #     uri: (( grab meta.github.uri ))
  #     branch: (( grab meta.github.branch_develop ))
  #     private_key: (( grab meta.github.private_key ))

  - name: git-master
    type: git
    check_every: 1h
    source:
      uri: (( grab meta.github.uri ))
      branch: (( grab meta.github.branch_master ))
      private_key: (( grab meta.github.private_key ))

  # - name: deploy-develop
  #   type: cf
  #   source:
  #     api: (( grab meta.cf.api ))
  #     skip_cert_check: (( grab meta.cf.skip_cert_check ))
  #     username: (( grab meta.cf.username ))
  #     password: (( grab meta.cf.password ))
  #     organization: (( grab meta.cf.organization ))
  #     space: (( grab meta.cf.space ))

  - name: deploy-master
    type: cf
    source:
      api: (( grab meta.cf.api ))
      skip_cert_check: (( grab meta.cf.skip_cert_check ))
      username: (( grab meta.cf.username ))
      password: (( grab meta.cf.password ))
      organization: (( grab meta.cf.organization ))
      space: (( grab meta.cf.space ))
